#
# https://github.com/P3TERX/Actions-OpenWrt
# MT798x 系列路由器固件自动编译脚本

name: MT798x OpenWrt Build

# 触发工作流程的事件
on:
  repository_dispatch:  # 允许通过 API 触发工作流程
  workflow_dispatch:    # 允许手动触发工作流程
    inputs:
      device_selection:
        description: '选择要编译的设备'
        required: true
        type: choice
        options:
          - 全部
          - AX6000
          - WR30U
          - 360T7
        default: '全部'

# 环境变量设置
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git  # 源码仓库地址
  REPO_BRANCH: openwrt-21.02  # 源码分支
  FEEDS_CONF: feeds.conf.default  # feeds 配置文件
  UPLOAD_BIN_DIR: false  # 是否上传整个 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true   # 是否发布 Release
  TZ: Asia/Shanghai     # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 作为构建环境
    strategy:
      fail-fast: false
      matrix:
        include:
          - device: AX6000
            config_file: ./config/21.02/immortalwrtARM/AX6000/AX6000-mtwifi-cfg.config
            diy_p1_sh: ./diy/21.02/immortalwrtARM/AX6000/diy-part1.sh
            diy_p2_sh: ./diy/21.02/immortalwrtARM/AX6000/diy-part2.sh
          - device: WR30U
            config_file: ./config/21.02/immortalwrtARM/WR30U/WR30U-mtwifi-cfg.config
            diy_p1_sh: ./diy/21.02/immortalwrtARM/WR30U/diy-part1.sh
            diy_p2_sh: ./diy/21.02/immortalwrtARM/WR30U/diy-part2.sh
          - device: 360T7
            config_file: ./config/21.02/immortalwrtARM/360T7/360T7-mtwifi-cfg.config
            diy_p1_sh: ./diy/21.02/immortalwrtARM/360T7/diy-part1.sh
            diy_p2_sh: ./diy/21.02/immortalwrtARM/360T7/diy-part2.sh
    
    if: >
      github.event.inputs.device_selection == '全部' ||
      github.event.inputs.device_selection == matrix.device

    steps:
    - name: Checkout  # 检出代码
      uses: actions/checkout@main

    - name: Initialization environment  # 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        # 更新并安装编译所需软件包
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code  # 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds  # 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x ${{ matrix.diy_p1_sh }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.diy_p1_sh }}

    - name: Update feeds  # 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration  # 加载自定义配置
      run: |
        [ -e files/21.02 ] && mkdir -p openwrt/files && mv files/21.02/* openwrt/files
        [ -e ${{ matrix.config_file }} ] && mv ${{ matrix.config_file }} openwrt/.config
        chmod +x ${{ matrix.diy_p2_sh }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.diy_p2_sh }}

    - name: Download package  # 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 编译固件
      id: compile
      run: |
        # 记录开始时间
        echo "start_time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        # 记录结束时间
        echo "end_time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}_${{ matrix.device }}
        path: openwrt/bin

    - name: Organize files  # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}_${{ matrix.device }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag  # 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M-2102")-${{ matrix.device }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release  # 上传固件到 Release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        artifacts: "${{ env.FIRMWARE }}/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: "release.txt"
        allowUpdates: true
        replacesArtifacts: true

    - name: Delete workflow runs  # 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases  # 删除旧的发布
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send build notification  # 发送编译完成通知
      if: always()
      run: |
        # 获取编译开始时间和结束时间
        START_TIME="${{ steps.compile.outputs.start_time }}"
        END_TIME="${{ steps.compile.outputs.end_time }}"
        if [ -z "$START_TIME" ]; then
          START_TIME=$(date -d "@${{ github.event.repository.pushed_at }}" '+%Y-%m-%d %H:%M:%S')
        fi
        if [ -z "$END_TIME" ]; then
          END_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        fi
        
        # 计算编译耗时
        DURATION=$(( $(date -d "$END_TIME" +%s) - $(date -d "$START_TIME" +%s) ))
        HOURS=$((DURATION / 3600))
        MINUTES=$(( (DURATION % 3600) / 60 ))
        
        # 构建通知内容
        NOTIFICATION="<h2>🔄 OpenWrt 固件编译通知</h2>
        
        <h3>📋 编译环境信息：</h3>
        <ul>
          <li>运行环境: Ubuntu 22.04</li>
          <li>源码分支: ${REPO_BRANCH}</li>
          <li>源码仓库: immortalwrt-mt798x</li>
          <li>开始时间: ${START_TIME}</li>
        </ul>
        
        <h3>✅ ${{ matrix.device }}</h3>
        <ul>
          <li>⏱️ 编译完成于: $(date '+%m月%d日 %H:%M')</li>
          <li>📥 下载固件: <a href='${{ steps.tag.outputs.release_tag }}'>点击下载</a></li>
          <li>⌛ 总耗时: ${HOURS}h${MINUTES}m</li>
        </ul>"
        
        # 转义JSON特殊字符
        escape_json() {
          echo "$1" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g'
        }
        
        ESCAPED_NOTIFICATION=$(escape_json "${NOTIFICATION}")
        
        # 构建JSON数据
        JSON_DATA="{
          \"appToken\": \"${{ secrets.WXPUSHER_TOKEN }}\",
          \"content\": \"${ESCAPED_NOTIFICATION}\",
          \"summary\": \"OpenWrt-${{ matrix.device }} 固件编译已完成\",
          \"contentType\": 2,
          \"uids\": [\"${{ secrets.WXPUSHER_UIDS }}\"]
        }"
        
        # 发送通知
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "${JSON_DATA}" \
          https://wxpusher.zjiecode.com/api/send/message
