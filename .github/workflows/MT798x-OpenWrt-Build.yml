#
# https://github.com/P3TERX/Actions-OpenWrt
# MT798x 系列路由器固件自动编译脚本

name: MT798x OpenWrt Build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device_selection:
        description: '选择要编译的设备'
        required: true
        type: choice
        options:
          - 全部
          - AX6000
          - WR30U
          - 360T7
        default: '全部'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  WXPUSHER_TOKEN: ${{ secrets.WXPUSHER_TOKEN }}
  WXPUSHER_UIDS: ${{ secrets.WXPUSHER_UIDS }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理系统空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        
        # 更新包列表
        sudo -E apt-get -qq update
        
        # 安装编译所需的依赖包
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        
        # 清理 apt 缓存
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        
        # 创建工作目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
        # 记录开始时间，并初始化 BUILD_RESULTS，作用是保存编译结果
        echo "START_TIME=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "BUILD_RESULTS=" >> $GITHUB_ENV

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 更新并安装软件源
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 编译固件
      id: build
      run: |
        if [ "${{ github.event.inputs.device_selection }}" = "全部" ]; then
          DEVICES=("AX6000" "WR30U" "360T7")
        else
          DEVICES=("${{ github.event.inputs.device_selection }}")
        fi
        
        echo "检测到的设备列表：${DEVICES[@]}"

        # results初始化编译结果，作用是保存编译结果
        results=""
        
        # 遍历设备列表，开始编译
        for device in "${DEVICES[@]}"; do
          device_start_time=$(date '+%Y-%m-%d %H:%M:%S')
          echo "开始编译 ${device} 固件..."
          
          # 设置设备特定的配置文件
          CONFIG_FILE="./config/21.02/immortalwrtARM/${device}/${device}-mtwifi-cfg.config"
          DIY_P1_SH="./diy/21.02/immortalwrtARM/${device}/diy-part1.sh"
          DIY_P2_SH="./diy/21.02/immortalwrtARM/${device}/diy-part2.sh"
          
          # 加载配置
          cd openwrt
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE .config
          [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH && $GITHUB_WORKSPACE/$DIY_P1_SH
          [ -e $DIY_P2_SH ] && chmod +x $DIY_P2_SH && $GITHUB_WORKSPACE/$DIY_P2_SH
          
          # 编译固件
          make defconfig
          make download -j8
          make -j$(nproc) || make -j1 V=s

          # 判断编译是否成功，成功则记录固件链接，失败则记录失败时间
          if [ $? -eq 0 ]; then
            status="success"
            device_end_time=$(date '+%Y-%m-%d %H:%M:%S')
            firmware_link="https://github.com/${{ github.repository }}/releases/download/latest/${device}-firmware.bin"
            results="${results}${device}|${status}|${device_start_time}|${device_end_time}|${firmware_link}\n"
          else
            status="failed"
            device_end_time=$(date '+%Y-%m-%d %H:%M:%S')
            results="${results}${device}|${status}|${device_start_time}|${device_end_time}|\n"
          fi
          # 返回工作目录
          cd $GITHUB_WORKSPACE
        done
        
        # 保存编译结果
        echo "BUILD_RESULTS<<EOF" >> $GITHUB_ENV
        # 将编译结果写入 GITHUB_ENV
        echo -e "$results" >> $GITHUB_ENV
        # 结束保存
        echo "EOF" >> $GITHUB_ENV

    - name: 发送编译通知
      if: always()
      run: |
        # 生成通知内容
        notification="🔄 OpenWrt 固件编译通知\n"
        notification+="开始时间: ${{ env.START_TIME }}\n\n"
        notification+="📋 编译环境信息：\n"
        notification+="• 运行环境: $(lsb_release -ds)\n"
        notification+="• 源码分支: ${REPO_BRANCH}\n"
        notification+="• 源码仓库: $(basename ${REPO_URL} .git)\n\n"
        # 初始化成功和失败计数
        success_count=0
        fail_count=0

        # 读取 BUILD_RESULTS 并生成通知
        while IFS='|' read -r device status start_time end_time link; do
          if [ "$status" == "success" ]; then
            notification+="✅ ${device}\n"
            notification+="⏱️ 编译完成于: $(date -d "$end_time" '+%m月%d日 %H:%M')\n"
            if [ -n "$link" ]; then
              notification+="📥 <copy data-clipboard-text=\"$link\">复制下载链接</copy>\n\n"
            fi
            ((success_count++))
          else
            notification+="❌ ${device}\n"
            notification+="⏱️ 编译失败于: $(date -d "$end_time" '+%m月%d日 %H:%M')\n\n"
            ((fail_count++))
          fi
        done <<< "${{ env.BUILD_RESULTS }}"
        
        # 计算总耗时
        total=$((success_count + fail_count))
        duration=$(( $(date -d "$end_time" +%s) - $(date -d "${{ env.START_TIME }}" +%s) ))
        hours=$((duration / 3600))
        minutes=$(( (duration % 3600) / 60 ))
        
        notification+="📊 编译结果统计\n"
        notification+="• 共 ${total} 个固件\n"
        notification+="• ${success_count} 个成功\n"
        notification+="• ${fail_count} 个失败\n"
        notification+="⌛ 总耗时: ${hours}h${minutes}m\n"
        
        # 发送通知
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{
            \"appToken\": \"${{ env.WXPUSHER_TOKEN }}\",
            \"content\": \"$notification\",
            \"summary\": \"OpenWrt 固件编译完成\",
            \"contentType\": 2,
            \"uids\": [\"${{ env.WXPUSHER_UIDS }}\"]
          }" \
          https://wxpusher.zjiecode.com/api/send/message

    - name: 清理旧的发布
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2 
