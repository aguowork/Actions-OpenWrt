#
# https://github.com/P3TERX/Actions-OpenWrt
# OpenWrt 多设备固件自动编译脚本

name: OpenWrt 多设备固件编译

# 触发工作流程的事件
on:
  repository_dispatch:  # 允许通过 API 触发工作流程
  workflow_dispatch:    # 允许手动触发工作流程

# 环境变量设置
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git  # 源码仓库地址
  REPO_BRANCH: openwrt-21.02  # 源码分支
  FEEDS_CONF: feeds.conf.default  # feeds 配置文件
  UPLOAD_BIN_DIR: false  # 是否上传整个 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true   # 是否发布 Release
  TZ: Asia/Shanghai     # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      build_results: ${{ steps.collect_results.outputs.results }}
      build_duration: ${{ steps.collect_results.outputs.build_duration }}
      start_time: ${{ steps.record_time.outputs.start_time }}

    strategy:
      fail-fast: false
      matrix:
        device:
          - name: "AX6000"
            config: "./config/21.02/immortalwrtARM/AX6000/AX6000-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/AX6000/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/AX6000/diy-part2.sh"
          - name: "WR30U"
            config: "./config/21.02/immortalwrtARM/WR30U/WR30U-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/WR30U/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/WR30U/diy-part2.sh"
          - name: "360T7"
            config: "./config/21.02/immortalwrtARM/360T7/360T7-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/360T7/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/360T7/diy-part2.sh"

    steps:
    - name: Record start time
      id: record_time
      run: |
        echo "start_time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "BUILD_START_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

    - name: Checkout  # 检出代码
      uses: actions/checkout@main

    - name: Initialization environment  # 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code  # 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds  # 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x ${{ matrix.device.diy_p1 }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.device.diy_p1 }}

    - name: Update feeds  # 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration  # 加载自定义配置
      run: |
        [ -e files/21.02 ] && mkdir -p openwrt/files && mv files/21.02/* openwrt/files
        [ -e ${{ matrix.device.config }} ] && mv ${{ matrix.device.config }} openwrt/.config
        chmod +x ${{ matrix.device.diy_p2 }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.device.diy_p2 }}

    - name: Clean build directory  # 清理编译目录
      run: |
        cd openwrt
        make clean

    - name: Download package  # 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ matrix.device.name }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ matrix.device.name }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag  # 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M-2102")-${{ matrix.device.name }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release  # 上传固件到 Release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        artifacts: "${{ env.FIRMWARE }}/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: "release.txt"
        allowUpdates: true
        replacesArtifacts: true

    - name: Delete workflow runs  # 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases  # 删除旧的发布
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 收集编译结果
    - name: Collect build results
      id: collect_results
      if: always()
      run: |
        BUILD_TIME=$(date '+%m月%d日 %H:%M')
        END_TIMESTAMP=$(date +%s)
        DURATION=$((END_TIMESTAMP - ${{ env.BUILD_START_TIMESTAMP }}))
        HOURS=$((DURATION / 3600))
        MINUTES=$(( (DURATION % 3600) / 60 ))
        
        {
          echo "results<<EOF"
          if [ "${{ steps.compile.outputs.status }}" = "success" ]; then
            RELEASE_TAG=$(date +"%Y.%m.%d-%H%M-2102")-${{ matrix.device.name }}
            DL_LINK="https://github.com/${{ github.repository }}/releases/tag/${RELEASE_TAG}"
            echo "${{ matrix.device.name }}:success:${BUILD_TIME}:${DL_LINK}"
          else
            echo "${{ matrix.device.name }}:failed:${BUILD_TIME}:-"
          fi
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        echo "build_duration=${HOURS}h${MINUTES}m" >> $GITHUB_OUTPUT

  # 添加新的通知任务
  notify:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    env:
      REPO_BRANCH: ${{ needs.build.outputs.repo_branch }}
    steps:
      - name: Send summary notification
        run: |
          # 处理编译结果并生成通知内容
          NOTIFICATION="<div style='font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;'>"
          
          # 转义特殊字符
          escape_json() {
            echo "$1" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\n/\\n/g' | sed 's/\t/\\t/g'
          }
          
          # 标题部分
          NOTIFICATION="${NOTIFICATION}<div style='text-align:center;background-color:#409eff;color:white;padding:20px;border-radius:8px;margin-bottom:20px;'>"
          NOTIFICATION="${NOTIFICATION}<h2 style='margin:0;'>🔄 OpenWrt 固件编译通知</h2>"
          NOTIFICATION="${NOTIFICATION}<div style='margin-top:10px;font-size:14px;'>开始时间: ${{ needs.build.outputs.start_time }}</div>"
          NOTIFICATION="${NOTIFICATION}</div>"
          
          # 编译环境信息
          NOTIFICATION="${NOTIFICATION}<div style='background-color:#f8f9fa;padding:15px;border-radius:4px;margin-bottom:20px;'>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#606266;font-size:14px;'>📋 编译环境信息：</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:12px;margin-top:5px;'>• 运行环境: Ubuntu 22.04</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:12px;'>• 源码分支: ${{ env.REPO_BRANCH }}</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:12px;'>• 源码仓库: <a href='${{ env.REPO_URL }}' style='color:#409eff;text-decoration:none;'>immortalwrt-mt798x</a></div>"
          NOTIFICATION="${NOTIFICATION}</div>"
          
          # 编译结果
          echo "${{ needs.build.outputs.build_results }}" | while IFS=':' read -r device status time link; do
            if [ "$status" = "success" ]; then
              # 成功项
              NOTIFICATION="${NOTIFICATION}<div style='background-color:#f0f9eb;border-left:4px solid #67c23a;padding:15px;margin:15px 0;border-radius:4px;box-shadow:0 2px 4px rgba(0,0,0,0.05);'>"
              NOTIFICATION="${NOTIFICATION}<div style='color:#67c23a;font-size:16px;font-weight:bold;'>✅ ${device}</div>"
              NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:13px;margin:8px 0;'>⏱️ 编译完成于: ${time}</div>"
              if [ "${link}" != "-" ]; then
                NOTIFICATION="${NOTIFICATION}<div style='margin:8px 0;display:flex;gap:10px;'>"
                NOTIFICATION="${NOTIFICATION}<a href='${link}' style='color:#409eff;text-decoration:none;font-size:13px;'>📥 下载固件</a>"
                NOTIFICATION="${NOTIFICATION}<copy style='color:#409eff;cursor:pointer;font-size:13px;' data-clipboard-text='${link}'>[复制链接]</copy>"
                NOTIFICATION="${NOTIFICATION}</div>"
              fi
              NOTIFICATION="${NOTIFICATION}</div>"
            else
              # 失败项
              NOTIFICATION="${NOTIFICATION}<div style='background-color:#fef0f0;border-left:4px solid #f56c6c;padding:15px;margin:15px 0;border-radius:4px;box-shadow:0 2px 4px rgba(0,0,0,0.05);'>"
              NOTIFICATION="${NOTIFICATION}<div style='color:#f56c6c;font-size:16px;font-weight:bold;'>❌ ${device}</div>"
              NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:13px;margin:8px 0;'>⏱️ 失败时间: ${time}</div>"
              NOTIFICATION="${NOTIFICATION}</div>"
            fi
          done
          
          # 总结信息
          SUCCESS_COUNT=$(echo "${{ needs.build.outputs.build_results }}" | grep -c "success")
          TOTAL_COUNT=$(echo "${{ needs.build.outputs.build_results }}" | wc -l)
          
          NOTIFICATION="${NOTIFICATION}<div style='background-color:#f4f4f5;border-left:4px solid #909399;padding:15px;margin:15px 0;border-radius:4px;box-shadow:0 2px 4px rgba(0,0,0,0.05);'>"
          NOTIFICATION="${NOTIFICATION}<div style='font-weight:bold;color:#303133;'>📊 编译结果统计</div>"
          NOTIFICATION="${NOTIFICATION}<div style='display:flex;justify-content:space-between;margin-top:10px;'>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:13px;'>• 共 ${TOTAL_COUNT} 个固件</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#67c23a;font-size:13px;'>• ${SUCCESS_COUNT} 个成功</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#f56c6c;font-size:13px;'>• $((TOTAL_COUNT-SUCCESS_COUNT)) 个失败</div>"
          NOTIFICATION="${NOTIFICATION}</div>"
          NOTIFICATION="${NOTIFICATION}<div style='color:#909399;font-size:13px;margin-top:10px;'>⌛ 总耗时: ${{ needs.build.outputs.build_duration }}</div>"
          NOTIFICATION="${NOTIFICATION}</div>"
          
          NOTIFICATION="${NOTIFICATION}</div>"
          
          # 使用转义函数处理通知内容
          ESCAPED_NOTIFICATION=$(escape_json "${NOTIFICATION}")
          
          # 构建完整的 JSON 数据
          JSON_DATA=$(cat <<EOF
          {
            "appToken": "AT_ryo91ZPH31fKLonPBFN5UwlxTkPl7Vf0",
            "content": "${ESCAPED_NOTIFICATION}",
            "summary": "OpenWrt 固件编译完成",
            "contentType": 2,
            "uids": ["UID_L22PV9Qdjy4q6P3d0dthW1TJiA3k"]
          }
          EOF
          )
          
          # 发送通知
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "${JSON_DATA}" \
            https://wxpusher.zjiecode.com/api/send/message