#
# https://github.com/P3TERX/Actions-OpenWrt
# OpenWrt 多设备固件自动编译脚本

name: Build Multiple Devices OpenWrt

# 触发工作流程的事件
on:
  repository_dispatch:  # 允许通过 API 触发工作流程
  workflow_dispatch:    # 允许手动触发工作流程

# 环境变量设置
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git  # 源码仓库地址
  REPO_BRANCH: openwrt-21.02  # 源码分支
  FEEDS_CONF: feeds.conf.default  # feeds 配置文件
  UPLOAD_BIN_DIR: false  # 是否上传整个 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true   # 是否发布 Release
  TZ: Asia/Shanghai     # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04

    # 添加输出变量用于收集编译结果
    outputs:
      build_results: ${{ steps.collect_results.outputs.results }}

    strategy:
      fail-fast: false
      matrix:
        device:
          - name: "AX6000"
            config: "./config/21.02/immortalwrtARM/AX6000/AX6000-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/AX6000/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/AX6000/diy-part2.sh"
          - name: "WR30U"
            config: "./config/21.02/immortalwrtARM/WR30U/WR30U-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/WR30U/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/WR30U/diy-part2.sh"
          - name: "360T7"
            config: "./config/21.02/immortalwrtARM/360T7/360T7-mtwifi-cfg.config"
            diy_p1: "./diy/21.02/immortalwrtARM/360T7/diy-part1.sh"
            diy_p2: "./diy/21.02/immortalwrtARM/360T7/diy-part2.sh"

    steps:
    - name: Checkout  # 检出代码
      uses: actions/checkout@main

    - name: Initialization environment  # 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code  # 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds  # 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x ${{ matrix.device.diy_p1 }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.device.diy_p1 }}

    - name: Update feeds  # 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration  # 加载自定义配置
      run: |
        [ -e files/21.02 ] && mkdir -p openwrt/files && mv files/21.02/* openwrt/files
        [ -e ${{ matrix.device.config }} ] && mv ${{ matrix.device.config }} openwrt/.config
        chmod +x ${{ matrix.device.diy_p2 }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ matrix.device.diy_p2 }}

    - name: Clean build directory  # 清理编译目录
      run: |
        cd openwrt
        make clean

    - name: Download package  # 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ matrix.device.name }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ matrix.device.name }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag  # 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M-2102")-${{ matrix.device.name }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release  # 上传固件到 Release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        artifacts: "${{ env.FIRMWARE }}/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: "release.txt"
        allowUpdates: true
        replacesArtifacts: true

    - name: Delete workflow runs  # 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases  # 删除旧的发布
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 收集编译结果
    - name: Collect build results
      id: collect_results
      run: |
        if [ "${{ steps.compile.outputs.status }}" = "success" ]; then
          BUILD_TIME=$(date '+%H时%M分')
          echo "${{ matrix.device.name }}:success:${BUILD_TIME}" >> build_results.txt
        else
          BUILD_TIME=$(date '+%H时%M分')
          echo "${{ matrix.device.name }}:failed:${BUILD_TIME}" >> build_results.txt
        fi
        echo "results=$(cat build_results.txt)" >> $GITHUB_OUTPUT

  # 添加新的通知任务
  notify:
    needs: build
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: Send summary notification
        run: |
          # 处理编译结果并生成通知内容
          NOTIFICATION="OpenWrt固件编译工作流运行结束\n\n"
          echo "${{ needs.build.outputs.build_results }}" | tr ' ' '\n' | while IFS=':' read -r device status time; do
            if [ "$status" = "success" ]; then
              NOTIFICATION="${NOTIFICATION}✅ ${device} 编译成功 (完成时间: ${time})\n"
            else
              NOTIFICATION="${NOTIFICATION}❌ ${device} 编译失败 (失败时间: ${time})\n"
            fi
          done
          
          # 添加总结信息
          SUCCESS_COUNT=$(echo "${{ needs.build.outputs.build_results }}" | tr ' ' '\n' | grep -c "success")
          TOTAL_COUNT=$(echo "${{ needs.build.outputs.build_results }}" | tr ' ' '\n' | wc -l)
          NOTIFICATION="${NOTIFICATION}\n📊 总结: 共${TOTAL_COUNT}个固件，${SUCCESS_COUNT}个成功，$((TOTAL_COUNT-SUCCESS_COUNT))个失败"
          
          # 对通知内容进行 URL 编码
          ENCODED_NOTIFICATION=$(echo -n "$NOTIFICATION" | jq -sRr @uri)
          
          # 发送通知
          curl -X GET "https://wxpusher.zjiecode.com/api/send/message/?appToken=AT_jf0zuTx0PjA4qBnyCGeKf5J4t0DeUIc6&content=${ENCODED_NOTIFICATION}&uid=UID_L22PV9Qdjy4q6P3d0dthW1TJiA3k"