#
# https://github.com/P3TERX/Actions-OpenWrt
# 多设备 OpenWrt 固件自动编译脚本

name: Build Multiple Devices OpenWrt

# 触发工作流程的事件
on:
  repository_dispatch:  # 允许通过 API 触发工作流程
  workflow_dispatch:    # 允许手动触发工作流程

# 环境变量设置
env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git  # 源码仓库地址
  REPO_BRANCH: openwrt-21.02  # 源码分支
  FEEDS_CONF: feeds.conf.default  # feeds 配置文件
  UPLOAD_BIN_DIR: false  # 是否上传整个 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: true   # 是否发布 Release
  TZ: Asia/Shanghai     # 时区设置

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Update and Install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # 添加缓存支持
    - name: Cache downloads
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: Cache ccache
      uses: actions/cache@v3
      with:
        path: /workdir/.ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    # 设置 ccache
    - name: Setup ccache
      run: |
        mkdir -p /workdir/.ccache
        cd openwrt
        echo "CONFIG_CCACHE=y" >> .config
        export CCACHE_DIR=/workdir/.ccache
        ccache -M 10G
        ccache -o compression=true
        ccache -o compression_level=9

    # 为每个设备编译固件
    - name: Build firmware for all devices
      run: |
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
        devices=("AX6000" "WR30U" "360T7")
        for device in "${devices[@]}"; do
          echo "::group::Building $device"
          echo "Building for $device..."
          
          # 复制设备特定的配置和文件
          [ -e files/21.02 ] && mkdir -p openwrt/files && cp -rf files/21.02/* openwrt/files/
          cp "./config/21.02/immortalwrtARM/$device/$device-mtwifi-cfg.config" openwrt/.config
          
          # 执行设备特定的自定义脚本
          chmod +x "./diy/21.02/immortalwrtARM/$device/diy-part1.sh"
          chmod +x "./diy/21.02/immortalwrtARM/$device/diy-part2.sh"
          cd openwrt
          $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/$device/diy-part1.sh
          $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/$device/diy-part2.sh
          
          # 编译固件
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          
          # 整理固件文件
          mkdir -p /workdir/firmware/$device
          cp -r bin/targets/*/* /workdir/firmware/$device/
          rm -rf /workdir/firmware/$device/packages
          
          # 清理编译目录，但保留下载的软件包和ccache
          rm -rf build_dir tmp
          cd $GITHUB_WORKSPACE
          echo "::endgroup::"
        done

    # 检查磁盘使用情况
    - name: Check space usage
      if: always()
      run: df -hT

    # 上传所有设备的固件
    - name: Upload firmware
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware_all_devices${{ env.FILE_DATE }}
        path: /workdir/firmware

    # 为每个设备创建 Release
    - name: Create releases
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        devices=("AX6000" "WR30U" "360T7")
        for device in "${devices[@]}"; do
          release_tag="$(date +"%Y.%m.%d-%H%M-2102")-$device"
          
          # 创建 release 文件
          echo "### $device 固件发布" > release.txt
          echo "编译时间: $(date '+%Y-%m-%d %H:%M:%S')" >> release.txt
          echo "源码版本: $REPO_BRANCH" >> release.txt
          
          # 使用 GitHub API 创建 release
          gh release create "$release_tag" \
            --title "$device OpenWrt Build $release_tag" \
            --notes-file release.txt \
            /workdir/firmware/$device/*
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 发送编译完成通知
    - name: Send Push Notification
      if: always()
      run: |
        status="${{ job.status }}"
        devices=("AX6000" "WR30U" "360T7")
        message="OpenWrt Build Status: $status%0A"
        for device in "${devices[@]}"; do
          message+="$device: $status%0A"
        done
        curl -X GET "https://wxpusher.zjiecode.com/api/send/message/?appToken=AT_jf0zuTx0PjA4qBnyCGeKf5J4t0DeUIc6&content=$message&uid=UID_L22PV9Qdjy4q6P3d0dthW1TJiA3k"

    - name: Delete workflow runs  # 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases  # 删除旧的发布
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 9  # 保留最新的9个版本(每个设备3个)
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}