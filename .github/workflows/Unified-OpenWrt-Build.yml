#
# https://github.com/P3TERX/Actions-OpenWrt
# OpenWrt 多设备固件统一自动编译脚本

name: Unified OpenWrt Build

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
        libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
        python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
        uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "START_TIME=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    # AX6000 编译
    - name: Build AX6000
      id: build_ax6000
      run: |
        cd openwrt
        rm -f .config
        cp $GITHUB_WORKSPACE/config/21.02/immortalwrtARM/AX6000/AX6000-mtwifi-cfg.config .config
        chmod +x $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/AX6000/diy-part*.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/AX6000/diy-part1.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/AX6000/diy-part2.sh
        make defconfig
        make download -j8
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "ax6000_status=$?" >> $GITHUB_ENV
        echo "ax6000_time=$(date '+%m月%d日 %H:%M')" >> $GITHUB_ENV
        if [ $? -eq 0 ]; then
          mkdir -p /workdir/ax6000_firmware
          cp -r bin/targets/*/* /workdir/ax6000_firmware/
          echo "ax6000_url=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)" >> $GITHUB_ENV
        fi
        make clean

    # WR30U 编译
    - name: Build WR30U
      id: build_wr30u
      run: |
        cd openwrt
        rm -f .config
        cp $GITHUB_WORKSPACE/config/21.02/immortalwrtARM/WR30U/WR30U-mtwifi-cfg.config .config
        chmod +x $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/WR30U/diy-part*.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/WR30U/diy-part1.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/WR30U/diy-part2.sh
        make defconfig
        make download -j8
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "wr30u_status=$?" >> $GITHUB_ENV
        echo "wr30u_time=$(date '+%m月%d日 %H:%M')" >> $GITHUB_ENV
        if [ $? -eq 0 ]; then
          mkdir -p /workdir/wr30u_firmware
          cp -r bin/targets/*/* /workdir/wr30u_firmware/
          echo "wr30u_url=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)" >> $GITHUB_ENV
        fi
        make clean

    # 360T7 编译
    - name: Build 360T7
      id: build_360t7
      run: |
        cd openwrt
        rm -f .config
        cp $GITHUB_WORKSPACE/config/21.02/immortalwrtARM/360T7/360T7-mtwifi-cfg.config .config
        chmod +x $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/360T7/diy-part*.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/360T7/diy-part1.sh
        $GITHUB_WORKSPACE/diy/21.02/immortalwrtARM/360T7/diy-part2.sh
        make defconfig
        make download -j8
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "t7_status=$?" >> $GITHUB_ENV
        echo "t7_time=$(date '+%m月%d日 %H:%M')" >> $GITHUB_ENV
        if [ $? -eq 0 ]; then
          mkdir -p /workdir/360t7_firmware
          cp -r bin/targets/*/* /workdir/360t7_firmware/
          echo "t7_url=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)" >> $GITHUB_ENV
        fi

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        artifacts: |
          /workdir/ax6000_firmware/*
          /workdir/wr30u_firmware/*
          /workdir/360t7_firmware/*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        allowUpdates: true
        replacesArtifacts: true

    - name: Send Push Notification
      if: always()
      run: |
        # 计算成功和失败数量
        success_count=0
        fail_count=0
        
        if [ "${{ env.ax6000_status }}" = "0" ]; then
          ((success_count++))
        else
          ((fail_count++))
        fi
        
        if [ "${{ env.wr30u_status }}" = "0" ]; then
          ((success_count++))
        else
          ((fail_count++))
        fi
        
        if [ "${{ env.t7_status }}" = "0" ]; then
          ((fail_count++))
        else
          ((fail_count++))
        fi
        
        # 计算总耗时
        start_time=$(date -d "${{ env.START_TIME }}" +%s)
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        hours=$((duration / 3600))
        minutes=$(((duration % 3600) / 60))
        
        # 构建通知内容
        notification="🔄 OpenWrt 固件编译通知<br>"
        notification+="开始时间: ${{ env.START_TIME }}<br><br>"
        
        notification+="📋 编译环境信息：<br>"
        notification+="• 运行环境: Ubuntu 22.04<br>"
        notification+="• 源码分支: openwrt-21.02<br>"
        notification+="• 源码仓库: immortalwrt-mt798x<br><br>"
        
        # AX6000 状态
        if [ "${{ env.ax6000_status }}" = "0" ]; then
          notification+="<div style='background-color: #e8f5e9; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="✅ AX6000<br>"
          notification+="⏱️ 编译完成于: ${{ env.ax6000_time }}<br>"
          notification+="📥 下载固件 <copy data-clipboard-text='${{ env.ax6000_url }}'>复制链接</copy><br>"
          notification+="</div>"
        else
          notification+="<div style='background-color: #ffebee; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="❌ AX6000<br>"
          notification+="⏱️ 编译失败于: ${{ env.ax6000_time }}<br>"
          notification+="</div>"
        fi
        
        # WR30U 状态
        if [ "${{ env.wr30u_status }}" = "0" ]; then
          notification+="<div style='background-color: #e8f5e9; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="✅ WR30U<br>"
          notification+="⏱️ 编译完成于: ${{ env.wr30u_time }}<br>"
          notification+="📥 下载固件 <copy data-clipboard-text='${{ env.wr30u_url }}'>复制链接</copy><br>"
          notification+="</div>"
        else
          notification+="<div style='background-color: #ffebee; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="❌ WR30U<br>"
          notification+="⏱️ 编译失败于: ${{ env.wr30u_time }}<br>"
          notification+="</div>"
        fi
        
        # 360T7 状态
        if [ "${{ env.t7_status }}" = "0" ]; then
          notification+="<div style='background-color: #e8f5e9; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="✅ 360T7<br>"
          notification+="⏱️ 编译完成于: ${{ env.t7_time }}<br>"
          notification+="📥 下载固件 <copy data-clipboard-text='${{ env.t7_url }}'>复制链接</copy><br>"
          notification+="</div>"
        else
          notification+="<div style='background-color: #ffebee; padding: 10px; border-radius: 5px; margin: 5px 0;'>"
          notification+="❌ 360T7<br>"
          notification+="⏱️ 编译失败于: ${{ env.t7_time }}<br>"
          notification+="</div>"
        fi
        
        notification+="<br>📊 编译结果统计<br>"
        notification+="• 共 3 个固件<br>"
        notification+="• ${success_count} 个成功<br>"
        notification+="• ${fail_count} 个失败<br>"
        notification+="⌛ 总耗时: ${hours}h${minutes}m"
        
        # 发送通知
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{
            \"appToken\": \"AT_ryo91ZPH31fKLonPBFN5UwlxTkPl7Vf0\",
            \"content\": \"$notification\",
            \"summary\": \"OpenWrt 固件编译完成\",
            \"contentType\": 2,
            \"uids\": [\"UID_L22PV9Qdjy4q6P3d0dthW1TJiA3k\"]
          }" \
          https://wxpusher.zjiecode.com/api/send/message

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 